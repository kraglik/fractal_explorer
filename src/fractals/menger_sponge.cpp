#include "menger_sponge.h"

const std::string distance_function_code =
        "inline float DEBox(float3 pos, float hlen) {\n"
        "    return max(fabs(pos.x), max(fabs(pos.y), fabs(pos.z))) - hlen;\n"
        "}\n"
        "\n"
        "float fractal_distance(float3 pos) {\n"
        "                      \n"
        "    const float scale = 3.0f;\n"
        "    const float scaleM = 3.0f - 1.0f;\n"
        "    const float3 offset = (float3)(1.0f, 1.0f, 1.0f);\n"
        "    const int iters = 16;\n"
        "    const float psni = native_powr(scale, -(float)iters);\n"
        "    \n"
        "    for (int n = 0; n < iters; n++) {\n"
        "        pos = fabs(pos);\n"
        "        if (pos.x < pos.y)\n"
        "            pos.xy = pos.yx;\n"
        "        if (pos.x < pos.z)\n"
        "            pos.xz = pos.zx;\n"
        "        if (pos.y < pos.z)\n"
        "            pos.yz = pos.zy;\n"
        "    \n"
        "        pos = pos * scale - offset * (scaleM);\n"
        "        if (pos.z < -0.5f * offset.z * (scaleM))\n"
        "            pos.z += offset.z * (scaleM);\n"
        "    }\n"
        "    \n"
        "    return DEBox(pos, scale * 0.3333334f) * psni;\n"
        "}\n";

const std::string orbit_function_code =
        "float3 orbit_trap(float3 pos) {\n"
        "\n"
        "   float3 color = {1e20f, 1e20f, 1e20f};\n"
        "   float3 new_color;\n"
        "   float3 orbit = {0, 0, 0};\n"
        "   float3 m = {0.42f, 0.38f, 0.19f};\n"
        "\n"
        "   const float scale = 3.0f;\n"
        "   const float scaleM = 3.0f - 1.0f;\n"
        "   const float3 offset = (float3)(1.0f, 1.0f, 1.0f);\n"
        "   const int iters = 16;\n"
        "   const float psni = native_powr(scale, -(float)iters);\n"
        "   \n"
        "   for (int n = 0; n < iters; n++) {\n"
        "       pos = fabs(pos);\n"
        "       if (pos.x < pos.y)\n"
        "           pos.xy = pos.yx;\n"
        "       if (pos.x < pos.z)\n"
        "           pos.xz = pos.zx;\n"
        "       if (pos.y < pos.z)\n"
        "           pos.yz = pos.zy;\n"
        "   \n"
        "       pos = pos * scale - offset * (scaleM);\n"
        "       if (pos.z < -0.5f * offset.z * (scaleM))\n"
        "           pos.z += offset.z * (scaleM);\n"
        "           \n"
        "       orbit = max(orbit, pos * m);\n"
        "   }\n"
        "\n"
        "   return orbit;\n"
        "\n"
        "}\n";

MengerSponge::MengerSponge()
        : Fractal(distance_function_code, orbit_function_code) {}